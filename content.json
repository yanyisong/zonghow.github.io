{"pages":[],"posts":[{"title":"Hollow Knight","text":"空洞骑士 地图","link":"/ad89ku/"},{"title":"git中的重置操作","text":"理解 reset 和 checkout 参考：https://www.progit.cn/ git reset假设我们现在有如图所示的提交历史，使用 git reset --hard HEAD^ (reset 的最彻底版)，看看会发生哪些事情。 第一步：将HEAD 和 master 分支一起移动到前一个提交（因为这里指定了 HEAD^）。此时的 HEAD 所指向的内容、暂存区的内容、工作区的内容看起来像这样：第二步：用 HEAD 和 master 所指向的前一个提交所指向的文件快照覆盖当前的暂存区。此时工作区还有最后一次提交的改动。如果此时使用 git status 会显示 modified: file.txt ，但是不会停止，重置还会继续。 第三步：用暂存区文件快照覆盖工作区。此时最后一次提交的改动已经“完全”丢失，如果此时使用 git status 查看会显示 nothing to commit, working tree clean 。 这当然不是我们每次想重置时需要的结果，下面是关键了。当前面说了， git reset --hard 是 reset 的最彻底版。如果想在第一步之后停止，则是 git reset --soft ，此时暂存区和工作区还保留着最后一次提交的改动；如果想在第二步时停止，则是 git reset 或 git reset --mixed ，此时只有工作区保留着最后一次提交的改动；当然，想要彻底重置，就是 git reset --hard 。 如果在 reset 后携带指定文件路径，reset 将会跳过第一步（因为 HEAD 只是一个指针，无法让它同时指向两个提交中各自的一部分）。使用 git reset file.txt 来取消某个文件的暂存原理就是如此，因为会在第二步时停止，即在将前一个提交的内容覆盖暂存区后停止，相当于取消 add。 git checkout不带路径git checkout [branch] 和 git reset --hard [branch] 都会试图更新三块区域让其看起来像 [branch] ，但 reset 会移动 HEAD 和 HEAD 分支的指向， checkout 只会移动 HEAD 带路径git checkout (commit) [file] 不会移动 HEAD，但会使用该次提交中的文件更新暂存区，覆盖工作区，对工作区并不安全。 两个命令对三个区域的影响速查表 HEAD 暂存区（索引） 工作区 工作区安全 Commit Level reset --soft [commit] REF NO NO YES reset [commit] REF YES NO YES reset --hard [commit] REF YES YES NO checkout [commit] HEAD YES YES YES File Level reset (commit) [file] NO YES NO YES checkout (commit) [file] NO YES YES NO","link":"/bxffk9/"},{"title":"常用的软件工具","text":"🛠 🛠 🛠 https://karabiner-elements.pqrs.org/改键神器，CapsLock 和 Ctrl 对换，Hyper 键等等等 1password账号密码管理工具，自动填充工具，只需一个主密码，忘掉其它密码吧。 Manico快速启动神器，配合 karabiner，设置一个 Hyper 键位，秒切程序 Alfred家喻户晓了，这个就不说了，一些 workflow 很实用 https://ohmyz.sh/一个 shell，内置的 alias，各种插件，真香 https://www.typora.io/一个本地的 markdown 编辑器，好看，好用 SwitchHosts图形化，分组化设置 hosts，方便","link":"/cl3h5u/"},{"title":"Pkg.json","text":"🤔🤔🤔 main、module、umd:main 等main 是一个 npm 包的入口，如在 node 环境下 require 包的时候会从 main 字段指定的目录下导入，所以一般指向的是 cjs 规范的 es5 语法的入口文件，正常打包工具支持 cjs 规范的包是没有问题的，但是有些打包工具的 tree shaking 功能依赖于静态导入导出，也就是依赖 es module，所以再约定 module 指向一个 esm 模块化规范，es5 语法的入口文件（之所以是 es5 是因为大部分打包工具的编译流程中都会忽略 node_modules 下文件的编译），同理，umd:main 是一个兼容 amd，cjs，global 的通用模式。如果指定打包工具引入 umd 规范的文件则会找 umd:main。","link":"/ecmqxm/"},{"title":"计算机网络","text":"TCP、UDP、HTTP… 运输层运输层向它上面的应用层提供通信服务，两个主机通信时，只有主机的协议栈才有运输层，路由器在转发分组时只用到下三层。而且真正通信的实体是主机中的进程，所以运输层提供的是应用进程间的逻辑通信。 进程的创建和撤销是动态的，所以需要端口。TCP/IP 的运输层使用一个 16 位的端口号来标志一个端口，可允许65535个不同的端口号。 运输层有两个主要协议：UDP（User Datagram Protocol）TCP（Transmission Control Protocol） UDPUDP 是无连接的，是面向报文的，应用层交给 UDP 多长的报文，UDP 就照样发送，一次发送一个报文，接收方也是去除首部后原样交给上层，所以程序需要选择合适大小的报文。UDP 在网络拥塞时不会降低发送速率，适合网络游戏、实时会议等。UDP 支持一对一、一对多、多对多的交互通信。UDP 首部只有 8 个字节，TCP 需要 20 个。 TCPTCP 是面向连接的，必须先建立连接，连接是一对一的。TCP 可靠，无差错， 不丢失，不重复，按序到达。全双工通信，允许双方同时发送数据。面向字节流。TCP 有缓存区，不关心应用层一次把多长的报文放到缓存中，会根据情况自行决定一个报文中包含多少个字节。TCP 一对一连接的两个端点叫套接字，即：TCP连接:=={socket1, socket2}={(IP1:port1), (IP2:port2)} TCP 可靠传输停止等待协议，发送完数据后等待对方确认后再发送下一个分组，并且有超时重传策略（ARQ：Automatic Repeat reQuest）。在等待确认过程中，需要暂时保留发送分组的副本。分组和确认分组都进行编号，用来识别分组。重传计时器的设置时间应比分组传输平均往返时间更长一些。但停止等待协议信道利用率低，也会采用流水线传输，需要使用连续 ARQ 和滑动窗口协议。 TCP 报文的首部TCP 报文首部最小 20 字节，后面可以跟 4N 个可选字节。但总长不能超过 60 字节。序号4 个字节，是当前报文数据的第一个字节的序号。确认号4 个字节，期望收到对方下一个报文数据的第一个字节的序号。数据偏移4 位，数据部分偏移的长度，也是 TCP 报文首部的长度，最大值是 60 字节。六个控制位 紧急 URG，URGent，提高报文的优先级 确认 ACK，ACKnowlegment 推送 PSH，PuSH，提高接收方上交给应用层的优先级 复位 RST，ReSet，重置连接 同步 SYN，同步序号，当 SYN=1 ACK=0 时表示是一个请求连接报文 终止 FIN，FINis，释放连接。 窗口2 个字节，从确认号算起，作为接收方让发送方设置其发送窗口，是动态的。校验和2 个字节紧急指针2 字节，只有 URG=1 时有意义，指出了紧急数据的末尾在报文中的位置，因为紧急数据后面还是普通数据。 TCP 连接的建立和释放建立连接，三次握手A 最后一次的确认，主要是为了防止已经失效的连接请求突然又传送到了 B，因而产生错误。例如：A 的第一个连接请求长时间滞留，B 延迟收到，仍会向 A 发送确认报文，如果没有最后一次的确认，那此时连接就已经建立了，但事实情况是 A 不会理会 B 的确认报文，B 收不到确认就无法建立连接。连接释放，四次挥手之所以 B 需要发送第二次确认报文，是因为当 A 确认关闭连接后，A 就没有数据需要发送了，但是 B 仍可能有数据需要发送，此时出于半关闭状态，当 B 没有数据要发送给 A 时，才第二次发送确认断开连接的报文。当 A 收到 B 的第二次确认关闭报文，会再发送一个确认报文给 B，B 收到该报文后立即关闭连接，但 A 还会经过时间等待计时器设置的 2MSL 后，才会关闭。之所以 A 需要等待 2MSL，是为了保证 A 最后发给 B 的确认报文能够到达 B（B 收不到会重传），以及防止网络中的报文段还存留，在下次连接中被收到。 同时 TCP 还有一个保活计时器，防止某端白白等下去。 应用层HTTPURL 的语法&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;其中用 ; 分隔的为输入参数。URL 使用 US-ASCII 字符集，并且集成了转义序列。 报文HTTP 报文分为请求报文和响应报文，都是由三个部分组成的：起始行，首部，主体。请求报文的格式： 1234&lt;method&gt;&lt;request-URL&gt;&lt;version&gt;&lt;headers&gt;&lt;entity-body&gt; 响应报文的格式： 1234&lt;version&gt;&lt;status&gt;&lt;reason-phrase&gt;&lt;headers&gt;&lt;entity-body&gt; MethodHEAD 方法表示只从服务器获取文档的首部OPTIONS 方法决定可以在服务器上执行哪些方法 Statushttps://httpstatuses.com/ 整体范围 已定义范围 分类 100~199 100~101 信息提示 200~299 200~206 成功 300~399 300~305 重定向 400~499 400~415 客户端错误 500~599 500~505 服务器错误 **HTTP 的连接TCP 的连接成本很高，为了优化 HTTP 连接，HTTP 做过一系列的优化HTTP/1.1 逐渐停止了对 keep-alive 连接的支持，使用一种持久连接的改进型设计取代了它，目的相同，但机制更优秀。HTTP/1.1 的持久连接是默认激活的，除非在报文中显示地增加一个 Connection: close 首部。 HTTP 缓存https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control 安全**** DNS递归查询，一般为主机向本地 DNS 服务器的查询询问本地 DNS 服务器，如果不知道，本地 DNS 服务器就以客户的身份向其他根 DNS 服务器发出查询请求报文，然后返回或报错。迭代查询，一般为本地 DNS 服务器向根 DNS 服务器查询本地 DNS 询问根 DNS 服务器，根 DNS 服务器告诉本地 DNS 服务器下一步需要向哪个服务器查询，而不是替代本地 DNS 服务器查询。 网络安全两类密码体制对称加密 非对称加密 数字签名TSL","link":"/fbr8zx/"},{"title":"收集一些遇到问题Google出来的解答","text":"🤔🤔🤔 Easy way to pull latest of all git submodulesHTTP status code for update and delete?","link":"/gk6h5m/"},{"title":"CS:GO","text":"bingo-bango-bongo, bish-bash-bosh! PATH\\Steam\\steamapps\\common\\Counter-Strike Global Offensive\\csgo\\cfg 启动项+exec autoexec -novid -worldwide -nojoy -preload -high 设置https://prosettings.net/cs-go-pro-settings-gear-list/https://prosettings.net/cs-go-best-settings-options-guide/ .cfg1234567891011# 滚轮上下 -&gt; 跳跃bind &quot;MWHEELUP&quot; &quot;+jump&quot;;bind &quot;MWHEELDOWN&quot; &quot;+jump&quot;;# 空格 -&gt; 蹲跳alias +cjump &quot;+jump; +duck&quot;;alias -cjump &quot;-jump; -duck&quot;;bind SPACE +cjump;# f -&gt; 跳投alias +jumpthrow &quot;+jump;-attack&quot;;alias -jumpthrow -jump;bind f +jumpthrow; 切换到上海电信服务器http://bbs.nga.cn/read.php?tid=14960332 显示帧数延迟1234# 显示net_graph 1# 缩小字体net_graphproportionalfont 0.9 自动切换数字振动：VibranceGUIvibranceGUI.zip 一些网站https://www.csgo-demos-manager.com/","link":"/hyzfb1/"},{"title":"软件版本","text":"版本号应该怎么改？ 参考资料：语义化版本 2.0.0Software release life cycle从参考资料中做一些总结。 版本号语义化版本号提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据软件所广泛使用的惯例所设计的。 X.Y.Z （主版本号.次版本号.修订号）X、Y 和 Z 为非负的整数，且禁止在数字前方补零。标记版本号的软件发行后，禁止改变该版本软件的内容。任何修改都必须以新版本发行。 主版本号：进行不向下兼容的修改时，递增主版本号，主版本号递增时，次版本号和修订号必须归零，主版本号为零（0.y.z）的软件处于开发初始阶段，最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。 次版本号：API 保持向下兼容的新增及修改时，递增次版本号，公共 API 的功能被标记为弃用时也必须递增，每当次版本号递增时，修订号必须归零。 修订号：修复问题但不影响 API 时，递增修订号。 先行版本号：标注在修订号之后，表示这个版本并非稳定而且可能无法满足预期的兼容性需求，先加上一个连接号再加上一连串以句点分隔的标识符来修饰。标识符由[0-9A-Za-z-]组成，禁止留白，数字禁止补零。先行版的优先级低于相关联的标准版本。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。 编译元数据：标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符来修饰。判断版本的优先层级时，版本编译元数据可被忽略。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。 比较版本的优先级：从左到右依次中断比较，数字越大版本越高，当主、次、修订号都相同时：通过先行版本号决定，先行版本优先级低，1.0.0-alpha &lt; 1.0.0。比较先行版本号：从左到右，比较每个被句点分隔的标识符，数字以数字高低比较，字母或连接号时逐字以 ASCII 排序比较。数字的标识符比非数字的标识符优先层级低。若开头的标识符都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0。 NPM &amp; Yarn 相关命令行NPM：https://docs.npmjs.com/cli/version.htmlYarn：https://yarnpkg.com/lang/en/docs/cli/version/#toc-updating-versions 软件版本周期https://en.wikipedia.org/wiki/Software_release_life_cycle Node.js 的 LTS 和 Current 版本TODO…","link":"/lhlgcg/"},{"title":"使用git rebase合并分支","text":"rebase 是啥？ 参考：https://www.progit.cn/ Git 中合并分支主要有两种方法： merge 和 rebase ，merge 我经常使用，rebase 使用的比较少，这次详细了解一下。 这是一个在 master 分支 merge 了 experiment 分支的的提交图，merge 的时候是将两个分支最新的提交：C4 C3 以及二者最近的共同祖先 C2 进行三方合并。合并会产生一个快照并提交，即C5。此时即使将 experiment 分支删除，一个分叉的历史记录还是存在的。 但是如果使用 rebase 12git checkout experimentgit rebase master 先找到两个分支的最近共同祖先 C2，然后对比当前分支相对于 C2 的后续提交，提取出来，然后将当前分支（experiment）的指针指向目标基底 C3，然后将之前提取出来的相对于 C2 的后续提交依序应用（experiment 指针会随着移动），此时的提交图是这样的：这时候再在 master 上合并 experiment 就是 fast forward 了。通过 rebase 然后 merge 的方法能保证 master 的提交历史是一条直线没有分叉，提交历史更加整洁。 rebase vs. merge喜欢“原味”提交记录的用 merge，喜欢直线提交记录的用 rebase。 (ﾟ ▽ ﾟ)/","link":"/odvahr/"},{"title":"RESTful API","text":"🤠🤠🤠 参考：https://blog.florimond.dev/restful-api-design-13-best-practices-to-make-your-users-happyhttp://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html 相关链接http 状态码：https://httpstatuses.com/github api：https://api.github.com/ HTTP Methods： GET 查 POST 增 PUT 改 PATCH 改（部分改） DELETE 删 URL 必须是名词不要用：/getAllCars/createNewCar/deleteAllRedCars而是： Resource GET POST PUT DELETE /cars 获取 car 列表 创建一个 car 批量更新 cars 删除所有的 car /cars/711 返回唯一的 car 方法不支持（405） 更新唯一的 car 删除 并且建议使用复数。 避免嵌套资源1GET: /authors/12/articles/ 1GET: /articles/?author_id=12 第二种更为直观 通过 url 参数进行过滤和分页甚至是排序1GET: /articles/?published=true&amp;page=2&amp;page_size=20 精确使用 HTTP 状态码 200 一切正常 201 新资源已创建 202 新资源正在创建，异步的 204 成功删除 304 资源未更改，客户端可使用缓存数据 400 请求不合法 401 身份未验证或验证失败 403 通过了身份验证，但权限不够 404 无资源 415 要求返回的格式不支持 500 服务器内部错误 不要在发生错误的时候也返回 200 状态码再将错误放在返回体中表示应该返回错误对应的 code，并将错误信息放在返回体中： 123456789HTTP/1.1 400 Bad RequestContent-Type: application/json{ \"error\": \"Invalid payoad.\", \"detail\": { \"surname\": \"This field is required.\" }} 版本化 API1api.xxx.com/v1/cars","link":"/ofdx24/"},{"title":"当前博客的架构","text":"✍️✍️✍️ 很久前就开始折腾博客了，搭过 Ghost，搭过 WordPress，搭过 Typecho，搭建过纯粹的 Github Pages，用过 Jeklly，用过 Hexo 等等等… 但是没有一个架构是满意的，要么是需要自己搭建服务，需要处理域名备案，数据迁移的问题，要么是纯粹的 Github Pages 编辑体验不好，还要处理 md 中图片 CDN 的问题。精力都花在了折腾搭建博客上了，草草产出的一些内容都因为换平台时被丢弃了。 本站目前的架构算是我比较满意的了，近期应该不会再折腾了，打算好好记录一些东西。 现在的编辑体验是这样的：只需要在 语雀 网页版或者客户端上编辑文章，点击发布，稍等片刻，就能同步到本站了，可以说非常友好了。 背后的流程是这样的：在语雀上编辑发布文章，触发在语雀上提前设置的 hook，语雀服务端会向设置的 url 发一个 post http 请求，这个 api 是你自己的服务，可以是简单的云函数，也可以跑在你自己的云机器上，这个 api 内部做了一个事情，就是触发这个静态博客对应的 github pages repo 的 action，在 github action 里，拉取了我在语雀上的文章，然后生成静态网页，然后 push 到 repo 的 master 分支，这样博客就更新了。 具体步骤网上其实也有一大堆，我就不赘述了。 希望自己坚持写点东西吧！","link":"/rbo88h/"},{"title":"客制化键盘刷配列","text":"keyboard~ Think6.5https://config.qmk.fm/ 个人配列：QMK 方案机械键盘 PCB 用户指导-内容里刷机软件改为 QMK Firmware Flasher.pdfgray_studio_think65_hotswap_layout_65_ansi_blocker_mine (10).json UNIGO66配列设置&amp;烧写https://tkg.iohttp://kle.ydkb.io/ 原始层12345678910[{w:1.5},&quot;Esc&quot;,&quot;!\\n1&quot;,&quot;@\\n2&quot;,&quot;#\\n3&quot;,&quot;$\\n4&quot;,&quot;%\\n5&quot;,&quot;_\\n-&quot;,{x:0.5},&quot;+\\n=&quot;,&quot;^\\n6&quot;,&quot;&amp;\\n7&quot;,&quot;*\\n8&quot;,&quot;(\\n9&quot;,&quot;)\\n0&quot;,{w:1.5},&quot;Backspace&quot;],[{w:1.5},&quot;Tab&quot;,&quot;Q&quot;,&quot;W&quot;,&quot;E&quot;,&quot;R&quot;,&quot;T&quot;,{h:1.5},&quot;Page Up&quot;,{x:0.5,h:1.5},&quot;{\\n[&quot;,&quot;Y&quot;,&quot;U&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;,{w:1.5},&quot;|\\n\\\\&quot;],[{w:1.5},&quot;Caps Lock&quot;,&quot;A&quot;,&quot;S&quot;,&quot;D&quot;,&quot;F&quot;,&quot;G&quot;,{x:2.5},&quot;H&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;:\\n;&quot;,{w:1.5},&quot;\\&quot;\\n'&quot;],[{y:-0.5,x:6.5,h:1.5},&quot;Page Down&quot;,{x:0.5,h:1.5},&quot;}\\n]&quot;],[{y:-0.5,w:1.5},&quot;Shift&quot;,&quot;Z&quot;,&quot;X&quot;,&quot;C&quot;,&quot;V&quot;,&quot;B&quot;,{x:2.5},&quot;N&quot;,&quot;M&quot;,&quot;&lt;\\n,&quot;,&quot;&gt;\\n.&quot;,&quot;↑&quot;,{w:1.5},&quot;RShift&quot;],[{x:0.5},&quot;Ctrl&quot;,&quot;Win&quot;,&quot;Alt&quot;,{x:8.5},&quot;←&quot;,&quot;↓&quot;,&quot;→&quot;],[{r:30,rx:5.5,ry:4,h:2},&quot;Space&quot;,{h:2},&quot;Ins&quot;],[&quot;RAlt&quot;,&quot;Del&quot;],[{r:-30,rx:10,x:-2,h:2},&quot;Home&quot;,{h:2},&quot;Enter&quot;],[{x:-2},&quot;End&quot;,&quot;RCtrl&quot;] 第 0 层12345678910[{w:1.5},&quot;~\\n`&quot;,&quot;!\\n1&quot;,&quot;@\\n2&quot;,&quot;#\\n3&quot;,&quot;$\\n4&quot;,&quot;%\\n5&quot;,&quot;_\\n-&quot;,{x:0.5},&quot;+\\n=&quot;,&quot;^\\n6&quot;,&quot;&amp;\\n7&quot;,&quot;*\\n8&quot;,&quot;(\\n9&quot;,&quot;)\\n0&quot;,{w:1.5},&quot;Backspace&quot;],[{w:1.5},&quot;Tab&quot;,&quot;Q&quot;,&quot;W&quot;,&quot;E&quot;,&quot;R&quot;,&quot;T&quot;,{h:1.5},&quot;PgUp&quot;,{x:0.5,h:1.5},&quot;{\\n[&quot;,&quot;Y&quot;,&quot;U&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;,{w:1.5},&quot;|\\n\\\\&quot;],[{w:1.5},&quot;Caps Lock&quot;,&quot;A&quot;,&quot;S&quot;,&quot;D&quot;,&quot;F&quot;,&quot;G&quot;,{x:2.5},&quot;H&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;:\\n;&quot;,{w:1.5},&quot;Enter&quot;],[{y:-0.5,x:6.5,h:1.5},&quot;PgDn&quot;,{x:0.5,h:1.5},&quot;}\\n]&quot;],[{y:-0.5,w:1.5},&quot;Shift&quot;,&quot;Z&quot;,&quot;X&quot;,&quot;C&quot;,&quot;V&quot;,&quot;B&quot;,{x:2.5},&quot;N&quot;,&quot;M&quot;,&quot;&lt;\\n,&quot;,&quot;&gt;\\n.&quot;,&quot;?\\n/&quot;,{w:1.5},&quot;RShift&quot;],[{x:0.5},&quot;Ctrl&quot;,&quot;Win&quot;,&quot;Alt&quot;,{x:8.5},&quot;Fn0&quot;,&quot;Win&quot;,&quot;Ctrl&quot;],[{r:30,rx:5.5,ry:4,h:2},&quot;Space&quot;,{h:2},&quot;Home&quot;],[{a:7},&quot;&quot;,{a:4},&quot;_\\n-&quot;],[{r:-30,rx:10,x:-2,h:2},&quot;End&quot;,{h:2},&quot;Space&quot;],[{x:-2},&quot;+\\n=&quot;,{a:7},&quot;&quot;] 第 1 层12345678910[{w:1.5},&quot;esc&quot;,&quot;f1&quot;,&quot;f2&quot;,&quot;f3&quot;,&quot;f4&quot;,&quot;f5&quot;,&quot;f6&quot;,{x:0.5},&quot;f7&quot;,&quot;f8&quot;,&quot;f9&quot;,&quot;f10&quot;,&quot;f11&quot;,&quot;f12&quot;,{w:1.5},&quot;del&quot;],[{a:7,w:1.5},&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,{h:1.5},&quot;&quot;,{x:0.5,h:1.5},&quot;&quot;,&quot;&quot;,{a:4},&quot;home&quot;,&quot;up&quot;,&quot;end&quot;,&quot;mute&quot;,{w:1.5},&quot;caps&quot;],[{a:7,w:1.5},&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,{x:2.5},&quot;&quot;,{a:4},&quot;left&quot;,&quot;down&quot;,&quot;right&quot;,&quot;volup&quot;,{w:1.5},&quot;\\&quot;\\n'&quot;],[{y:-0.5,x:6.5,a:7,h:1.5},&quot;&quot;,{x:0.5,h:1.5},&quot;&quot;],[{y:-0.5,w:1.5},&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,{x:2.5},&quot;&quot;,&quot;&quot;,{a:4},&quot;Play&quot;,&quot;prev&quot;,&quot;voldown&quot;,{w:1.5},&quot;next&quot;],[{x:0.5,a:7},&quot;&quot;,&quot;&quot;,&quot;&quot;,{x:8.5},&quot;&quot;,&quot;&quot;,&quot;&quot;],[{r:30,rx:5.5,ry:4,h:2},&quot;&quot;,{h:2},&quot;&quot;],[&quot;&quot;,&quot;&quot;],[{r:-30,rx:10,x:-2,h:2},&quot;&quot;,{h:2},&quot;&quot;],[{x:-2},&quot;&quot;,&quot;&quot;]","link":"/tmf8mf/"},{"title":"一些规范","text":"版本号应该怎么改，change log 应该怎么写，commit message 应该怎么写… 版本号软件版本 Change loge.g.react：https://github.com/facebook/react/blob/master/CHANGELOG.mdnodejs：https://github.com/nodejs/node/blob/master/CHANGELOG.mdangular：https://github.com/angular/angular/blob/master/CHANGELOG.md Commit messagee.g.react：https://github.com/facebook/react/commits/masterangular：https://github.com/angular/angular/commits/mastervue：https://github.com/vuejs/vue/commits/devnodejs：https://github.com/nodejs/node/commits/master","link":"/zghg6k/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Frontend","slug":"Frontend","link":"/tags/Frontend/"},{"name":"Networks","slug":"Networks","link":"/tags/Networks/"},{"name":"Backend","slug":"Backend","link":"/tags/Backend/"},{"name":"Other","slug":"Other","link":"/tags/Other/"}],"categories":[{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Keyboard","slug":"Keyboard","link":"/categories/Keyboard/"}]}